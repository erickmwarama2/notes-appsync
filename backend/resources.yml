# Books table
booksTable:
  Type: AWS::DynamoDB::Table
  Properties:
    AttributeDefinitions:
      - AttributeName: bookId
        AttributeType: S
    BillingMode: PAY_PER_REQUEST
    KeySchema:
      - AttributeName: bookId
        KeyType: HASH
    Tags:
      - Key: Name
        Value: books-table

# Order table
orderTable:
  Type: AWS::DynamoDB::Table
  Properties:
    AttributeDefinitions:
      - AttributeName: userId
        AttributeType: S
      - AttributeName: orderId
        AttributeType: S
      - AttributeName: bookId
        AttributeType: S
      - AttributeName: createdAt
        AttributeType: S
    BillingMode: PAY_PER_REQUEST
    KeySchema:
      - AttributeName: userId
        KeyType: HASH
      - AttributeName: orderId
        KeyType: RANGE
    GlobalSecondaryIndexes:
      - IndexName: byOrder
        KeySchema:
          - AttributeName: bookId
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        Projection:
          ProjectionType: ALL
    Tags:
      - Key: Name
        Value: order-table

# cognito user pool
cognitoUserPool:
  Type: AWS::Cognito::UserPool
  Properties:
    UsernameAttributes:
      - email
    UserPoolName: bookStoreUserPool

# cognito identity pool
cognitoIdentityPool:
  Type: AWS::Cognito::IdentityPool
  Properties:
    AllowUnauthenticatedIdentities: true
    CognitoIdentityProviders:
      - ClientId: !Ref cognitoUserPoolClient
        ProviderName: !GetAtt cognitoUserPool.ProviderName
    IdentityPoolName: bookStoreIdentityPool

# cognito identity pool role attatchment
cognitoIdentityPoolRoleAttatchment:
  Type: AWS::Cognito::IdentityPoolRoleAttachment
  Properties:
    IdentityPoolId: !Ref cognitoIdentityPool
    Roles:
      unauthenticated: !GetAtt cognitoUnauthIAMRole.Arn


# cognito user pool client
cognitoUserPoolClient:
  Type: AWS::Cognito::UserPoolClient
  Properties:
    ClientName: web
    UserPoolId: !Ref cognitoUserPool

# cognito user pool groups
cognitoAdminGroup:
  Type: AWS::Cognito::UserPoolGroup
  Properties:
    Description: Admin users belong to this group
    GroupName: Admin
    Precedence: 0
    RoleArn: !GetAtt cognitoAdminIAMRole.Arn
    UserPoolId: !Ref cognitoUserPool

# cognito Admin IAM Role
cognitoAdminIAMRole:
  Type: AWS::IAM::Role
  Properties:
    RoleName: bookstore-admin-role
    Description: IAM role that admin group users assume
    AssumeRolePolicyDocument:
      Version: "2012-10-17"
      Statement:
        - Effect: Allow
          Principal:
            Federated:
              - cognito-identity.amazonaws.com
          Action:
            - sts:AssumeRoleWithWebIdentity
    Policies:
      - PolicyName: bookstore-admin-group-policy
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:*
              Resource:
                - !GetAtt booksTable.Arn
                - !GetAtt orderTable.Arn

# cognito user pool groups (customers)
cognitoCustomerGroup:
  Type: AWS::Cognito::UserPoolGroup
  Properties:
    Description: Customers belong to this group
    GroupName: Customer
    Precedence: 1
    RoleArn: !GetAtt cognitoUserIAMRole.Arn
    UserPoolId: !Ref cognitoUserPool

# cognito user IAM Role
cognitoUserIAMRole:
  Type: AWS::IAM::Role
  Properties:
    RoleName: bookstore-customer-role
    Description: IAM role that admin group users assume
    AssumeRolePolicyDocument:
      Version: "2012-10-17"
      Statement:
        - Effect: Allow
          Principal:
            Federated:
              - cognito-identity.amazonaws.com
          Action:
            - sts:AssumeRoleWithWebIdentity
    Policies:
      - PolicyName: bookstore-customer-group-policy
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:*
              Resource:
                - !GetAtt orderTable.Arn
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:Query
                - dynamodb:BatchGetItem
              Resource:
                - !GetAtt booksTable.Arn

# cognito unauthenticated IAM Role
cognitoUnauthIAMRole:
  Type: AWS::IAM::Role
  Properties:
    RoleName: bookstore-unauth-role
    Description: IAM role that unauthenticated users assume
    AssumeRolePolicyDocument:
      Version: "2012-10-17"
      Statement:
        - Effect: Allow
          Principal:
            Federated:
              - cognito-identity.amazonaws.com
          Action:
            - sts:AssumeRoleWithWebIdentity
    Policies:
      - PolicyName: bookstore-unauth-user-policy
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - appsync:GraphQL
              Resource:
                - !Join
                  - "/"
                  - - !Ref GraphQlApi
                    - "types"
                    - "Query"
                    - "fields"
                    - "getBookById"